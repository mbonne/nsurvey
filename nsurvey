#!/bin/bash

###===============================================================##
##
##            Name:  siteSurveyNetwork
##          Author:  mb
##         Purpose:  Scan network endpoints and subnets
##         Created:  2020-03
##   Last Modified:
##         Version:  1
##    Source Notes: Need nmap installed for full functionality.
##                  Run script with sudo.

## EXAMPLE: sudo siteSurveyNetwork.sh /path/to/file/of/subnets.txt

## * Each line of the text file has a target subnet in CIDR notation *
## can do this/but will take a long time.
## 10.0.0.0/8
## 172.16.0.0/14
## 192.168.0.0/6

## If scrip is run without an argument ($1), it will calculate your current subnet mask
## running script against the Gateway address with the network prefix to fudge the network address.
## This could be cleaned up. but unsure how.
##
## Needless to say, but make sure you have permission to scan the targeted IP Addresses
## I take no responsibility for your actions.
## https://tools.ietf.org/html/rfc1918 - Your targeted hosts should fall within private addresses outlined in RFC1918
## Multicast: https://tools.ietf.org/html/rfc1112
###===============================================================##


## Setup the colour codes.
RED="\033[1;31m"
GREEN="\033[1;32m"
NOCOLOR="\033[0m"
##usage -> echo -e "${GREEN}text-goes-here${NOCOLOR}"

##pre-requisite - Need to run as root, in order to get traceroute results from nmap
## https://askubuntu.com/questions/15853/how-can-a-script-check-if-its-being-run-as-root
if [[ $EUID -ne 0 ]]; then
  echo -e "${RED}!!!! This script must be run as root !!!!${NOCOLOR}"
  echo -e "---> sudo siteSurveyNetwork.sh $1"
  exit 1
fi

##error handling of the $1 argunement
##https://stackoverflow.com/questions/50084229/bash-check-if-cidr-address-is-valid - todo: get this type of check going.
if [ -f "$1" ] && [ "${1: -4}" == ".txt" ]; then
  echo -e "Targeting subnets in file: $1"
else
  if test -z "$1";then
    echo -e "${GREEN}Begin network survey...${NOCOLOR}"
  else
    echo -e "${RED}!!!! If no suitable .txt file available - Run script on its own !!!!${NOCOLOR}"
    exit 1
  fi
fi

## SHOULD BE SAFE TO RUN NOW ##

###=========================Functions============================##
dumpIpForInterface()
{
  IT=$(ifconfig "$1")
  if [[ "$IT" != *"status: active"* ]]; then
    return
  fi
  if [[ "$IT" != *" broadcast "* ]]; then
    return
  fi
  echo "$IT" | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}'
}

main()
{
  # snagged from here: https://superuser.com/a/627581/38941
  DEFAULT_ROUTE=$(route -n get 0.0.0.0 2>/dev/null | awk '/interface: / {print $2}')
  if [ -n "$DEFAULT_ROUTE" ]; then
    dumpIpForInterface "$DEFAULT_ROUTE"
  else
    for i in $(ifconfig -s | awk '{print $1}' | awk '{if(NR>1)print}')
    do
      if [[ $i != *"vboxnet"* ]]; then
        dumpIpForInterface "$i"
      fi
    done
  fi
}


## function to convert subnet mask to CIDR notation https://stackoverflow.com/questions/50413579/bash-convert-netmask-in-cidr-notation/50414560
IPprefix_by_netmask() {
    #function returns prefix for given netmask in arg1
    bits=0
    for octet in $(echo $1| sed 's/\./ /g'); do
         binbits=$(echo "obase=2; ibase=10; ${octet}"| bc | sed 's/0//g')
         let bits+=${#binbits}
    done
    echo "/${bits}"
}

###=========================Variables============================##
## list of macOS network commands - https://gist.github.com/jjnilton/add1eeeb3a9616f53e4c
## active network interface: https://www.kittell.net/code/mac-osx-terminal-get-active-interface/
activeNic=$(route get default | grep interface | awk '{print $2}')
activeNicName=$(networksetup -listallhardwareports | grep -B 1 "$activeNic" | awk '/Hardware Port/{ print }'|cut -d " " -f3-)
gW=$(route get default | grep gateway | awk '{print $2}')
sN=$(ipconfig getoption "$activeNic" subnet_mask)
connectedSSID=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I | grep "SSID: " | awk '{print $2}' | tail -1)
subnetsToScan="$gW""$("IPprefix_by_netmask" "$sN")"


###======================== getting local host info ====================================##
## Prints current date
echo -e "${GREEN}===============================================================================${NOCOLOR}"
echo -e "${GREEN}Date: ${NOCOLOR}$(date +"%Y-%b-%d" | tr 'a-z' 'A-Z')"
echo -e "${GREEN}===============================================================================${NOCOLOR}"
echo -e "${GREEN}LOCALHOST NETWORK SETTINGS:${NOCOLOR}\n"

echo -e "Hostname: \t$(hostname)"
## show active network interface
echo -e "Active NIC: \t$activeNic = $activeNicName"
echo -e "MAC Address: \t$(ifconfig "$activeNic" | awk '/ether/{print $2}')"

if [[ "$activeNicName" = "Wi-Fi" ]]; then
  echo -e "Connected SSID: $connectedSSID"
fi

## Primary NIC IP
echo -e "LAN IP: \t$(main)"

## Show Subnetmask
echo -e "Subnetmask: \t$sN"
#echo "Subnet: $(ipconfig getoption $activeNic subnet_mask)"
echo -e "CIDR block: \t$(IPprefix_by_netmask "$sN")"

## Default Route / Gateway
echo -e "Gateway: \t$gW"
#route get default | grep gateway | awk '{print $2}'

echo -e "DHCP Server: \t$(ipconfig getoption "$activeNic" server_identifier)"

## show DNS Servers
echo -e "DNS: " ##$(ipconfig getoption $activeNic domain_name_server)
scutil --dns | grep nameserver | sort -u | awk '{print $1,$2,$3}'
## sort -u sorts by unique and only shows one per entry.

###============================ Quick internet connectivity checks ==================================##

echo -e "${GREEN}===============================================================================${NOCOLOR}"
echo -e "${GREEN}INTERNET CONNECTIVITY AND SPEEDTEST:${NOCOLOR}\n"
## To install speedtest cli use homebrew if you want to use it on its own by calling /usr/local/bin/speedtest
## Or not to let the script call it from github and run it.

## Show WAN IP Address: uses a reverse lookup. sanity check for your DNS.
echo "WAN IP: $(/usr/bin/dig @resolver1.opendns.com ANY myip.opendns.com +short)"
nc -vz google.com 443 2>&1 | grep succeeded

if [[ -e /usr/local/bin/speedtest ]]; then
  /usr/local/bin/speedtest
else
  echo -e "${RED}No speedtest cli found, attempting to download script from github...${NOCOLOR}"
  echo "Running speedtest by downloading py script..."
  ## following two commands check internet connectivity as well as showing WAN IP
  curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -
fi

echo -e "${GREEN}===============================================================================${NOCOLOR}"
echo -e "${GREEN}DHCP PACKET DETAILS:${NOCOLOR}\n"
###=============== basic port and connectivity scan of subnets ===============##
## This section will use the subnets listed in .txt file.(reading each line of file and running nmap against each subnet)
## $1 is therefore the path/to/text/file

ipconfig getpacket "$activeNic"

echo -e "${GREEN}===============================================================================${NOCOLOR}"

##check if nmap exists - not sure if best way to check exists.
if [[ -e $(command -v nmap) ]]; then
  if test -z "$1"; then
    ##Variable is empty, will set your current WAN IP
    #echo -e "${GREEN}===============================================================================${NOCOLOR}"
    echo -e "${GREEN}Running nmap against every IP:${NOCOLOR} $subnetsToScan"
    echo -e "${GREEN}===============================================================================${NOCOLOR}\n"
    nmap -T4 -F --traceroute "$subnetsToScan"
  else
    ## first argument when running command - Variable is NOT empty, will use the specified txt file containing list of subnets to scan
    ##https://www.cyberciti.biz/faq/unix-howto-read-line-by-line-from-file/
    subnetsToScan=$1
    #echo -e "${GREEN}===============================================================================${NOCOLOR}"
    echo -e "${GREEN}Running nmap against every subnet listed:${NOCOLOR} \n"
    cat "$1"
    echo " "
    while IFS= read -r line; do
    echo -e "${GREEN}===============================================================================${NOCOLOR}"
    echo -e "${GREEN}Scanning Subnet:${NOCOLOR} $line\n"

    nmap -T4 -F --traceroute "$line"
    done < "$subnetsToScan"
  fi
  echo -e "${GREEN}===============================================================================${NOCOLOR}"
else
  echo -e "${RED}nmap not found in /usr/local/bin/${NOCOLOR}\n-> Consider installing nmap and re-running script.\n"
  echo -e "${GREEN}===============================================================================${NOCOLOR}"
  echo -e "${GREEN}Running basic arp and ping scan:${NOCOLOR}\n"
  echo -e "Note: Script is running in reduced functionality mode.\nBe mindful of ARP cache which is not modified while running this script.\n"
  ##https://stackoverflow.com/questions/35927760/bash-script-loop-through-shell-output
  ##https://unix.stackexchange.com/questions/420778/deleting-parentheses-in-shell-script/421085
  ##https://stackoverflow.com/questions/2859908/iterating-over-each-line-of-ls-l-output
  ##https://stackoverflow.com/questions/10929453/read-a-file-line-by-line-assigning-the-value-to-a-variable/10929511#10929511
  while read -r x; do
    echo "Ping Host $x" | awk "sub(/[:?]/,x)"
    ping -c 1 -t 1 "$(echo "$x" | awk '{print $2}' | sed 's/[()]//g')" | tail -5
    host "$(echo "$x" | awk '{print $2}' | sed 's/[()]//g')"
    echo -e "${GREEN}===============================================================================${NOCOLOR}"
  done << EOF
  $(arp -a)
EOF
  echo -e "Multicast Addresses: RFC1112 - 224.0.0.0 to 239.255.255.255\n"
fi

echo -e "${GREEN}Finished running script.${NOCOLOR}"


exit $?
